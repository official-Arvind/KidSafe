// Generated by view binder compiler. Do not edit!
package com.github.muneebwanee.dash.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.muneebwanee.dash.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ToolbarBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final LinearLayout inputContainer;

  @NonNull
  public final RelativeLayout last;

  @NonNull
  public final RelativeLayout root;

  @NonNull
  public final ImageView tbActionDelete;

  @NonNull
  public final ImageView tbChildPhoto;

  @NonNull
  public final ImageView tbClear;

  @NonNull
  public final CardView tbContainer;

  @NonNull
  public final View tbDivider;

  @NonNull
  public final EditText tbEditText;

  @NonNull
  public final ImageView tbMenu;

  @NonNull
  public final ImageView tbNav;

  @NonNull
  public final TextView tbPlaceholder;

  @NonNull
  public final ProgressBar tbProgress;

  @NonNull
  public final LinearLayout tbRecord;

  @NonNull
  public final RecyclerView tbRecycler;

  @NonNull
  public final ImageView tbState;

  @NonNull
  public final TextView tbTimerRecord;

  @NonNull
  public final ImageView tbViewRecord;

  private ToolbarBinding(@NonNull View rootView, @NonNull LinearLayout inputContainer,
      @NonNull RelativeLayout last, @NonNull RelativeLayout root, @NonNull ImageView tbActionDelete,
      @NonNull ImageView tbChildPhoto, @NonNull ImageView tbClear, @NonNull CardView tbContainer,
      @NonNull View tbDivider, @NonNull EditText tbEditText, @NonNull ImageView tbMenu,
      @NonNull ImageView tbNav, @NonNull TextView tbPlaceholder, @NonNull ProgressBar tbProgress,
      @NonNull LinearLayout tbRecord, @NonNull RecyclerView tbRecycler, @NonNull ImageView tbState,
      @NonNull TextView tbTimerRecord, @NonNull ImageView tbViewRecord) {
    this.rootView = rootView;
    this.inputContainer = inputContainer;
    this.last = last;
    this.root = root;
    this.tbActionDelete = tbActionDelete;
    this.tbChildPhoto = tbChildPhoto;
    this.tbClear = tbClear;
    this.tbContainer = tbContainer;
    this.tbDivider = tbDivider;
    this.tbEditText = tbEditText;
    this.tbMenu = tbMenu;
    this.tbNav = tbNav;
    this.tbPlaceholder = tbPlaceholder;
    this.tbProgress = tbProgress;
    this.tbRecord = tbRecord;
    this.tbRecycler = tbRecycler;
    this.tbState = tbState;
    this.tbTimerRecord = tbTimerRecord;
    this.tbViewRecord = tbViewRecord;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolbarBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.toolbar, parent);
    return bind(parent);
  }

  @NonNull
  public static ToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.inputContainer;
      LinearLayout inputContainer = ViewBindings.findChildViewById(rootView, id);
      if (inputContainer == null) {
        break missingId;
      }

      id = R.id.last;
      RelativeLayout last = ViewBindings.findChildViewById(rootView, id);
      if (last == null) {
        break missingId;
      }

      id = R.id.root;
      RelativeLayout root = ViewBindings.findChildViewById(rootView, id);
      if (root == null) {
        break missingId;
      }

      id = R.id.tb_action_delete;
      ImageView tbActionDelete = ViewBindings.findChildViewById(rootView, id);
      if (tbActionDelete == null) {
        break missingId;
      }

      id = R.id.tb_child_photo;
      ImageView tbChildPhoto = ViewBindings.findChildViewById(rootView, id);
      if (tbChildPhoto == null) {
        break missingId;
      }

      id = R.id.tb_clear;
      ImageView tbClear = ViewBindings.findChildViewById(rootView, id);
      if (tbClear == null) {
        break missingId;
      }

      id = R.id.tb_container;
      CardView tbContainer = ViewBindings.findChildViewById(rootView, id);
      if (tbContainer == null) {
        break missingId;
      }

      id = R.id.tb_divider;
      View tbDivider = ViewBindings.findChildViewById(rootView, id);
      if (tbDivider == null) {
        break missingId;
      }

      id = R.id.tb_editText;
      EditText tbEditText = ViewBindings.findChildViewById(rootView, id);
      if (tbEditText == null) {
        break missingId;
      }

      id = R.id.tb_menu;
      ImageView tbMenu = ViewBindings.findChildViewById(rootView, id);
      if (tbMenu == null) {
        break missingId;
      }

      id = R.id.tb_nav;
      ImageView tbNav = ViewBindings.findChildViewById(rootView, id);
      if (tbNav == null) {
        break missingId;
      }

      id = R.id.tb_placeholder;
      TextView tbPlaceholder = ViewBindings.findChildViewById(rootView, id);
      if (tbPlaceholder == null) {
        break missingId;
      }

      id = R.id.tb_progress;
      ProgressBar tbProgress = ViewBindings.findChildViewById(rootView, id);
      if (tbProgress == null) {
        break missingId;
      }

      id = R.id.tb_record;
      LinearLayout tbRecord = ViewBindings.findChildViewById(rootView, id);
      if (tbRecord == null) {
        break missingId;
      }

      id = R.id.tb_recycler;
      RecyclerView tbRecycler = ViewBindings.findChildViewById(rootView, id);
      if (tbRecycler == null) {
        break missingId;
      }

      id = R.id.tb_state;
      ImageView tbState = ViewBindings.findChildViewById(rootView, id);
      if (tbState == null) {
        break missingId;
      }

      id = R.id.tb_timer_record;
      TextView tbTimerRecord = ViewBindings.findChildViewById(rootView, id);
      if (tbTimerRecord == null) {
        break missingId;
      }

      id = R.id.tb_view_record;
      ImageView tbViewRecord = ViewBindings.findChildViewById(rootView, id);
      if (tbViewRecord == null) {
        break missingId;
      }

      return new ToolbarBinding(rootView, inputContainer, last, root, tbActionDelete, tbChildPhoto,
          tbClear, tbContainer, tbDivider, tbEditText, tbMenu, tbNav, tbPlaceholder, tbProgress,
          tbRecord, tbRecycler, tbState, tbTimerRecord, tbViewRecord);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
